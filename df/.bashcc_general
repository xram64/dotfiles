#################################
##===##|                 |##===##
#=====#|    Aliases &    |#=====#
#=====#|    Functions    |#=====#
##===##|                 |##===##
#################################

#=# Environment variables #=#
export PATH=$PATH:/opt
export LESS="$LESS -R -Q"  # add defaults for less (show ANSI colors, no bell)
export LESSHISTFILE='/dev/null'  # disable less history

#=# General aliases #=#
alias ..='cd ..'; alias ...='cd ../..'; alias ....='cd ../../..'; alias .....='cd ../../../..'  # directory traversal shortcuts
alias sa='sudo apt-get'
alias sn='sudo nano'
alias l='ls -FlAsh --color --group-directories-first'
alias lr='ls -RA | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'  # full recursive dir listing
alias http='http --style monokai'  # colors: monokai, native, emacs, fruity
https() { http https://"$1"; }
alias scheme='csi'
alias ipython='ipython3'

#=# Built-in overrides and shortcuts #=#
alias grep_invert='grep -v'
alias grep_regex='grep -E'
alias gdb="gdb -q"  # silence copyright info
alias nani="nano -l -i -E -m -x"  # IDE mode (line numbers, auto-indent, tabs to spaces, mouse enabled)
alias find="find 2> >(grep -v 'Permission denied' >&2)"  # suppress 'Permission denied' messages
f() { find / -name *"$*"*; }  # simplified filename search on entire filesystem
findlocal() { find / -mount -name *"$*"*; }  # simplified filename search on local filesystem, skipping mounted drives

#=# Quick reference tools #=#
colormap() {
    for attr in 0 1; do
        for clfg in {30..37} 39 {90..97}; do
            if [ ${clfg} -eq 90 ]; then echo; fi
            echo -en "|\e[${attr};${clfg}m \\\e[${attr};${clfg}m \e[0m"
        done; echo "|"
    done
    echo -e "\nSyntax:  \\\e[\e[1;32m(ATTRIBUTE)\e[0m;\e[0;32m(FOREGROUND)\e[0mm"
}
colormapfull() {
    for clbg in {40..47} {100..107} 49; do
        for clfg in {30..37} {90..97} 39; do
            for attr in 0 1 2 4 5 7 ; do echo -en "\e[${attr};${clbg};${clfg}m \\\e[${attr};${clbg};${clfg}m \e[0m"; done; echo
        done
    done
    echo -e "\nSyntax:  \\\e[\e[1;32m(ATTRIBUTE)\e[0m;\e[0;32m(BACKGROUND)\e[0m;\e[0;32m(FOREGROUND)\e[0mm"
}

# \___________________________________/
# |===||   genpass [length=16]   ||===|
# Generate a strong random password (default length 16)
# (Use only non-breaking chars to make selection easier)
genpass() {
    if [[ -z $1 ]]; then len="16"; else len="$1"; fi
    < /dev/urandom tr -dc _A-Z-a-z-0-9_\@_\- | head -c${1:-$len};echo;
}

# \__________________________________/
# |===||   colorerr [command]   ||===|
# Color the stderr output of the following command
# (Use to differentiate between stdout and stderr in terminal)
# https://serverfault.com/questions/59262/bash-print-stderr-in-red-color
colorerr()(set -o pipefail;"$@" 2> >(sed $'s,.*,\e[31m&\e[m,'>&2));

# \_____________________________/
# |===||   gimme [label]   ||===|
# Recall code snippets for common shell commands
gimme() {
    labels=( 'bash-if' 'bash-regex' )
    labels_str=`echo ${labels[@]} | sed 's/\ /,\ /g'`  # comma-separate
    case "$1" in
        # [gimme bash-regex] Native Bash regex syntax with group capturing
        bash-if ) echo 'if [ -z $a ]; then echo "No"; else echo "Yes"; fi' ;;
        bash-regex ) echo 'str="foo123bar789"; [[ $str =~ ^foo([0-9]+)bar([0-9]+)$ ]] && echo -e "${BASH_REMATCH[1]} - ${BASH_REMATCH[2]}"' ;;

        *) echo "Usage: gimme [LABEL]"; echo 'Labels: ' $labels_str ;;
    esac
}

#####################################
##===##|                     |##===##
#=====#|     Additional      |#=====#
#=====#|    Modifications    |#=====#
##===##|                     |##===##
#####################################

# Terminal prompt color and text override
export PS1="\[\e[1;95m\][\u\[\e[0;95m\]@\[\e[1;95m\]\h | \w] \[\e[1;96m\](ﾉ◕ヮ◕)ﾉ*:･ﾟ✧\[\e[m\] "
# Terminal line continuation prompt
export PS2=" \[\e[1;35m\]...\[\e[m\] "

# Alternate prompts
## export PS1="\[\e[1;96m\]|::\[\e[1;95m\][\u\[\e[0;95m\]@\[\e[1;95m\]\h]\[\e[1;96m\]::\[\e[1;95m\][\w]\[\e[1;96m\]::|::>\[\e[m\] "
